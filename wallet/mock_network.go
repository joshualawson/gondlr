// Code generated by mockery v2.10.0. DO NOT EDIT.

package wallet

import (
	big "math/big"

	network "github.com/joshualawson/gondlr/network"
	mock "github.com/stretchr/testify/mock"
)

// MockNetwork is an autogenerated mock type for the Network type
type MockNetwork struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: amount, to
func (_m *MockNetwork) CreateTransaction(amount *big.Int, to string) error {
	ret := _m.Called(amount, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(*big.Int, string) error); ok {
		r0 = rf(amount, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CurrentHeight provides a mock function with given fields:
func (_m *MockNetwork) CurrentHeight() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Fee provides a mock function with given fields:
func (_m *MockNetwork) Fee() *big.Int {
	ret := _m.Called()

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *MockNetwork) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PublicKey provides a mock function with given fields:
func (_m *MockNetwork) PublicKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SendTransaction provides a mock function with given fields: data
func (_m *MockNetwork) SendTransaction(data interface{}) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tx provides a mock function with given fields: transactionID
func (_m *MockNetwork) Tx(transactionID string) (network.Transaction, error) {
	ret := _m.Called(transactionID)

	var r0 network.Transaction
	if rf, ok := ret.Get(0).(func(string) network.Transaction); ok {
		r0 = rf(transactionID)
	} else {
		r0 = ret.Get(0).(network.Transaction)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(transactionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
